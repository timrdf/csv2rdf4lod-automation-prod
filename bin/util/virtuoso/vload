#!/bin/bash
#
# Virtuoso			Bulk Loader Script
#
# Author: Shangguan (http://www.cs.rpi.edu/~shangz, shangz@cs.rpi.edu)
# Contributor: Tim Lebo (http://tw.rpi.edu/instances/TimLebo)
# Version: 1.1
# Date: May 27, 2011
# Description: Bulk loader script for Virtuoso
# Usage: vload [rdf|ttl|nt|nq] [data_file] [graph_uri]
# See http://docs.openlinksw.com/virtuoso/fn_ttlp_mt.html

me=$(cd ${0%/*} && echo ${PWD})/`basename $0`

USAGE="`basename $0` [--target] {rdf, ttl, nt, nq} <data_file> <graph_uri> [-v | --verbose]"

if [ "$1" == "--help" ]; then
   echo "usage: $USAGE"
   exit 1
fi

# Log into Virtuoso isql env
# USERNAME and PASSWORD (see http://docs.openlinksw.com/virtuoso/isql.html)
virtuoso_home=${CSV2RDF4LOD_PUBLISH_VIRTUOSO_HOME:-"/opt/virtuoso"}

isql=${CSV2RDF4LOD_PUBLISH_VIRTUOSO_ISQL_PATH:-"$virtuoso_home/bin/isql"}
if [ ! -e "$isql" ]; then
   isql=${CSV2RDF4LOD_PUBLISH_VIRTUOSO_ISQL_PATH:-"$virtuoso_home/bin/isql-v"}
fi
if [[ -n "$isql" && ! -e "$isql" && -e "`which isql-v &> /dev/null`" ]]; then # Debian installs to /usr/bin/isql-v
   isql=`which isql-v`
fi
if [ ! -e "$isql" ]; then
   echo "[ERROR] $isql not found. Cannot load triples."
   exit 1
fi

isql_cmd="$isql ${CSV2RDF4LOD_PUBLISH_VIRTUOSO_PORT:-"1111"} ${CSV2RDF4LOD_PUBLISH_VIRTUOSO_USERNAME:-"dba"}"
isql_pwd="${CSV2RDF4LOD_PUBLISH_VIRTUOSO_PASSWORD:-"dba"}"  # Default admin password, may neeed to change.

virtuoso_allowed_dir="${CSV2RDF4LOD_HOME}/tmp/`basename $0`/input-files" # -----------------------------.
#if [[ -n "$CSV2RDF4LOD_HOME" ]]; then                                                                #  |
if [[ -d "$CSV2RDF4LOD_CONVERT_DATA_ROOT" && -n "$CSV2RDF4LOD_PUBLISH_OUR_SOURCE_ID" ]]; then
   versionID=`md5.sh $me`                                                                             #  . 
   virtuoso_allowed_dir="$CSV2RDF4LOD_CONVERT_DATA_ROOT/$CSV2RDF4LOD_PUBLISH_OUR_SOURCE_ID/cr-`basename $0`/version/$versionID/doc/logs"
elif [[ "try" == "try" ]]; then
   # Fall back to seeing if we are actually in a data root.
   conversion_root=`cd $CSV2RDF4LOD_CONVERT_DATA_ROOT &> /dev/null; cr-conversion-root.sh --quiet`    #  |
   if [[ -z $conversion_root && -e $CSV2RDF4LOD_CONVERT_DATA_ROOT/source ]]; then                     #  |
      conversion_root=${CSV2RDF4LOD_CONVERT_DATA_ROOT}/source                                         #  |
   fi                                                                                                 #  |
   if [[ -n "$conversion_root"               && -n "$CSV2RDF4LOD_PUBLISH_OUR_SOURCE_ID" ]]; then
      me="cr-`basename $0`"                                                                           # \|/
      versionID=`md5.sh $0`                                                                           #  . 
      virtuoso_allowed_dir="$conversion_root/$CSV2RDF4LOD_PUBLISH_OUR_SOURCE_ID/$me/version/$versionID/doc/logs"
   else
      warn='[WARNING]: could not log to well-organized location; set'
      echo "$warn CSV2RDF4LOD_CONVERT_DATA_ROOT     $CSV2RDF4LOD_CONVERT_DATA_ROOT"
      echo "$warn CSV2RDF4LOD_PUBLISH_OUR_SOURCE_ID $CSV2RDF4LOD_PUBLISH_OUR_SOURCE_ID"
   fi
else
   echo "[WARNING]: could not log to well-organized location; set CSV2RDF4LOD_HOME"
fi
slug=`date +%Y-%m-%dT%H_%M_%S%z | sed 's/^\(.*\)\(..\)$/\1:\2/' | sed 's/:/-/g; s/\+/-/g'` # Copied from dateInXSDDateTime.sh
vload_log=$virtuoso_allowed_dir/load_${slug}_$$.log
#                               load_2013-02-02T13_22_02-05-00

if [[ "$1" == "--target" ]]; then
   echo $virtuoso_home
   echo $isql_cmd
   echo $isql_pwd
   echo $vload_log
   exit 1
fi


#
# Check usage
if [[ $# -lt 3 || $# -gt 4 ]]; then
	echo "usage: $USAGE"
   exit 1
fi

# Virtuoso can read from directories listed in 'DirsAllowed' 
# in /opt/virtuoso/var/lib/virtuoso/db/virtuoso.ini
if [ ! -d $virtuoso_allowed_dir ]; then

   echo "[INFO] (vload): mkdir -p $virtuoso_allowed_dir"
   mkdir -p $virtuoso_allowed_dir
   echo "[INFO] (vload): chmod a+w $virtuoso_allowed_dir"
   chmod a+w $virtuoso_allowed_dir

   # If we failed to do it as our own user...
   if [ ! -d $virtuoso_allowed_dir ]; then
      sudo mkdir -p $virtuoso_allowed_dir &> /dev/null
      sudo chmod a+w $virtuoso_allowed_dir &> /dev/null
   fi
fi


input_format="$1"
data_file="$2"
graph_uri="$3"

# Check if file exists
if [ ! -e $data_file ]; then
   echo "Data file doesn't exist: $data_file"
   exit 1
fi

echo "INFO (`basename $0`): Loading $2 into $graph_uri ..."

# Check to see if file is within a directory Virtuoso can read from directly.
load_in_place="false"
if [[ ${#CSV2RDF4LOD_CONVERT_DATA_ROOT} > 1 ]]; then
   if [[ $data_file =~ $CSV2RDF4LOD_CONVERT_DATA_ROOT.* ]]; then
      load_in_place="true"
   elif [[ -e `pwd`/$data_file && `pwd` =~ $CSV2RDF4LOD_CONVERT_DATA_ROOT.* ]]; then
      # data_file was a local name, but working directory is virtuoso-readable.
      load_in_place="true"
      data_file=`pwd`/$data_file
   fi
fi

if [[ $load_in_place == "false" ]]; then
   # Copy file to Virtuoso allowed directory
   cp ${data_file} ${virtuoso_allowed_dir}
   file_name_local=${data_file##*/}
   file_name_full=$virtuoso_allowed_dir/$file_name_local
   echo "WARNING: COPYING ${data_file} $file_name_full"
   echo "WARNING:   (set \$CSV2RDF4LOD_CONVERT_DATA_ROOT and add it to DirsAllowed in virtuoso.ini to avoid a redundant file copy)."
   echo "WARNING:   (see https://github.com/timrdf/csv2rdf4lod-automation/wiki/Publishing-conversion-results-with-a-Virtuoso-triplestore)."
else
   #echo "INFO (`basename $0`): Avoiding redundant file copy; file is within \$CSV2RDF4LOD_CONVERT_DATA_ROOT, a virtuoso-readable directory."
   file_name_full=$data_file
fi

# Call Virtuoso loading functions for different input formats
load_func=""
case "$input_format" in
   "rdf")
   load_func="DB.DBA.RDF_LOAD_RDFXML_MT(file_to_string_output('$file_name_full'), '', '$graph_uri', 2, ${CSV2RDF4LOD_CONCURRENCY:-1});"
   # echo $load_func
   ;;
   "ttl")
   load_func="DB.DBA.TTLP_MT(file_to_string_output('$file_name_full'),'','$graph_uri', 255, 2, ${CSV2RDF4LOD_CONCURRENCY:-1});"
   # echo $load_func
   ;;
   "nt")
   load_func="DB.DBA.TTLP_MT(file_to_string_output('$file_name_full'),'','$graph_uri', 255, 2, ${CSV2RDF4LOD_CONCURRENCY:-1});"
   # echo $load_func
   ;;
   "nq")
   load_func="DB.DBA.TTLP_MT(file_to_string_output('$file_name_full'),'','$graph_uri', 512, 2, ${CSV2RDF4LOD_CONCURRENCY:-1});"
   # echo $load_func
   ;;
   *)
   echo "Input format unacceptable"
   echo
   echo "		Acceptable input formats"
   echo "		1) rdf -- RDF/XML"
   echo "		2) ttl -- Turtle/N3"
   echo "		3) nt -- n-triple"
   echo "		4) nq -- n-quad"
   exit 0
   ;;
esac

start=`${CSV2RDF4LOD_HOME}/bin/util/dateInXSDDateTime.sh`
${isql_cmd} ${isql_pwd} << EOF &> $vload_log
   log_enable(3,1);
   $load_func
   exit;
EOF
# Tim removed   checkpoint; after $load_func and before exit; (because Greg? did on gemini)

echo ""                                                                                  >> $vload_log
echo "# start time: $start"                                                              >> $vload_log
echo "# user  name: $SUDO_USER as "`whoami`                                              >> $vload_log
echo "# isq: $isql"                                                                      >> $vload_log
echo "# CSV2RDF4LOD_PUBLISH_VIRTUOSO_PORT: ${CSV2RDF4LOD_PUBLISH_VIRTUOSO_PORT:-"1111"}" >> $vload_log
echo "# log_enable(3,1);"                                                                >> $vload_log
echo "# load function: $load_func"                                                       >> $vload_log
echo "# end   time: `${CSV2RDF4LOD_HOME}/bin/util/dateInXSDDateTime.sh`"                 >> $vload_log
# TODO: tic.sh PROV-O start and end times.

# Move the latest.log pointer to the log we just created.
rm $virtuoso_allowed_dir/latest.log &> /dev/null
ln -s $vload_log $virtuoso_allowed_dir/latest.log

if [[ $load_in_place == "false" ]]; then
   # Remove temp file
   rm $file_name_full
fi

if [ "$CSV2RDF4LOD_CONVERT_DEBUG_LEVEL" == "finest" ]; then
   echo "INFO (`basename $0`): Loading finished. $vload_log:"	
   cat $vload_log
else
   #echo "Loading finished. Check $virtuoso_allowed_dir/latest.log for details (currently $vload_log)."	
   echo "INFO (`basename $0`): Loading finished. Check $vload_log for details."	
fi

# TODO: cat file if it contains /^... Error/
if [[ "$4" == "-v" || "$4" == "--verbose" ]]; then
   cat $vload_log
fi
